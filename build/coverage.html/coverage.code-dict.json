{"/home/travis/build/npmtest/node-npmtest-jsftp/test.js":"/* istanbul instrument in package npmtest_jsftp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsftp/lib.npmtest_jsftp.js":"/* istanbul instrument in package npmtest_jsftp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jsftp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jsftp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jsftp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jsftp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jsftp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jsftp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jsftp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jsftp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jsftp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jsftp.__dirname + '/lib.npmtest_jsftp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsftp/node_modules/jsftp/lib/jsftp.js":"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*global require: true module: true */\n/*\n * @package jsftp\n * @copyright Copyright(c) 2012 Ajax.org B.V. <info@c9.io>\n * @author Sergi Mansilla <sergi.mansilla@gmail.com>\n * @license https://github.com/sergi/jsFTP/blob/master/LICENSE MIT License\n */\n\n'use strict';\n\nvar Net = require('net');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar fs = require('fs');\nvar combine = require('stream-combiner');\n\nvar ResponseParser = require('ftp-response-parser');\nvar ListingParser = require('parse-listing');\nvar once = require('once');\nvar unorm = require('unorm');\n\nvar debug = require('debug')('jsftp:general');\nvar dbgCommand = require('debug')('jsftp:command');\nvar dbgResponse = require('debug')('jsftp:response');\n\nvar FTP_PORT = 21;\nvar TIMEOUT = 10 * 60 * 1000;\nvar IDLE_TIME = 30000;\nvar NOOP = function() { };\nvar COMMANDS = [\n  // Commands without parameters\n  'abor', 'pwd', 'cdup', 'feat', 'noop', 'quit', 'pasv', 'syst',\n  // Commands with one or more parameters\n  'appe', 'cwd', 'dele', 'list', 'mdtm', 'mkd', 'mode', 'nlst', 'pass', 'retr', 'rmd',\n  'rnfr', 'rnto', 'site', 'stat', 'stor', 'type', 'user', 'xrmd', 'opts', 'rest',\n  // Extended features\n  'chmod', 'size', 'mlst', 'mlsd',\n];\n\nvar expectedMarks = {\n  marks: [125, 150],\n  ignore: 226,\n};\n\nvar RE_PASV = /([-\\d]+,[-\\d]+,[-\\d]+,[-\\d]+),([-\\d]+),([-\\d]+)/;\nvar FTP_NEWLINE = /\\r\\n|\\n/;\n\nfunction getPasvPort(text) {\n  var match = RE_PASV.exec(text);\n  if (!match) {\n    return null;\n  }\n\n  return {\n    host: match[1].replace(/,/g, '.'),\n    port: (parseInt(match[2], 10) & 255) * 256 + (parseInt(match[3], 10) & 255),\n  };\n}\n\nfunction runCmd() {\n  var callback = NOOP;\n  var args = [].slice.call(arguments);\n  var completeCmd = args.shift();\n\n  if (typeof args[args.length - 1] === 'function') {\n    callback = args.pop();\n  }\n\n  completeCmd += ' ' + args.join(' ');\n  this.execute(completeCmd.trim(), callback);\n}\n\nvar Ftp = module.exports = function(cfg) {\n  this.host = cfg.host || 'localhost';\n  this.port = cfg.port || FTP_PORT;\n  this.user = cfg.user || 'anonymous';\n  this.pass = cfg.pass || '@anonymous';\n  // True if the server doesn't support the `stat` command. Since listing a\n  // directory or retrieving file properties is quite a common operation, it is\n  // more efficient to avoid the round-trip to the server.\n  this.useList = cfg.useList || false;\n\n  this.commandQueue = [];\n\n  EventEmitter.call(this);\n\n  var self = this;\n  // Generate generic methods from parameter names. they can easily be\n  // overriden if we need special behavior. they accept any parameters given,\n  // it is the responsibility of the user to validate the parameters.\n  this.raw = function() {\n    return runCmd.apply(self, arguments);\n  };\n\n  COMMANDS.forEach(function(cmd) {\n    self.raw[cmd] = util.deprecate(\n      runCmd.bind(self, cmd),\n      'Ftp.raw[' + cmd + '](args): Use Ftp.raw(\\'' + cmd + ' args\\') instead.');\n  });\n\n  this.on('data', dbgResponse);\n\n  this._createSocket(this.port, this.host);\n};\n\nutil.inherits(Ftp, EventEmitter);\n\nFtp.prototype.reemit = function(event) {\n  var self = this;\n  return function(data) {\n    self.emit(event, data);\n    debug('event:' + event, data || {});\n  };\n};\n\nFtp.prototype._createSocket = function(port, host, firstAction) {\n  if (this.socket && this.socket.destroy) {\n    this.socket.destroy();\n  }\n\n  if (this.resParser) {\n    this.resParser.end();\n  }\n  this.resParser = new ResponseParser();\n\n  this.authenticated = false;\n  this.socket = Net.createConnection(port, host, firstAction || NOOP);\n  this.socket.on('connect', this.reemit('connect'));\n  this.socket.on('timeout', this.reemit('timeout'));\n\n  this.pipeline = combine(this.socket, this.resParser);\n\n  var self = this;\n\n  this.pipeline.on('data', function(data) {\n    self.emit('data', data);\n    dbgResponse(data.text);\n    self.parseResponse(data);\n  });\n  this.pipeline.on('error', this.reemit('error'));\n};\n\nFtp.prototype.parseResponse = function(response) {\n  if (this.commandQueue.length === 0) {\n    return;\n  }\n  if ([220].indexOf(response.code) > -1) {\n    return;\n  }\n\n  var next = this.commandQueue[0].callback;\n  if (response.isMark) {\n    // If we receive a Mark and it is not expected, we ignore that command\n    if (!next.expectsMark ||\n      next.expectsMark.marks.indexOf(response.code) === -1) {\n      return;\n    }\n\n    // We might have to ignore the command that comes after the mark.\n    if (next.expectsMark.ignore) {\n      this.ignoreCmdCode = next.expectsMark.ignore;\n    }\n  }\n\n  if (this.ignoreCmdCode === response.code) {\n    this.ignoreCmdCode = null;\n    return;\n  }\n\n  this.parse(response, this.commandQueue.shift());\n};\n\n/**\n * Sends a new command to the server.\n *\n * @param {String} command Command to write in the FTP socket\n */\nFtp.prototype.send = function(command) {\n  if (!command) {\n    return;\n  }\n\n  dbgCommand(command);\n  this.pipeline.write(command + '\\r\\n');\n\n  dbgCommand(command);\n};\n\nFtp.prototype.nextCmd = function() {\n  var cmd = this.commandQueue[0];\n  if (!this.inProgress && cmd) {\n    this.send(cmd.action);\n    this.inProgress = true;\n  }\n};\n\n/**\n * Check whether the ftp user is authenticated at the moment of the\n * enqueing. ideally this should happen in the `push` method, just\n * before writing to the socket, but that would be complicated,\n * since we would have to 'unshift' the auth chain into the queue\n * or play the raw auth commands (that is, without enqueuing in\n * order to not mess up the queue order. ideally, that would be\n * built into the queue object. all this explanation to justify a\n * slight slopiness in the code flow.\n *\n * @param {string} action\n * @param {function} callback\n */\nFtp.prototype.execute = function(action, callback) {\n  if (this.socket && this.socket.writable) {\n    return this.runCommand(action, callback || NOOP);\n  }\n\n  var self = this;\n  this.authenticated = false;\n  this._createSocket(this.port, this.host, function() {\n    self.runCommand(action, callback || NOOP);\n  });\n};\n\nFtp.prototype.runCommand = function(action, callback) {\n  var cmd = {\n    action: action,\n    callback: callback,\n  };\n\n  if (this.authenticated || /^(feat|syst|user|pass)/.test(action)) {\n    this.commandQueue.push(cmd);\n    this.nextCmd();\n    return;\n  }\n\n  var self = this;\n  this.getFeatures(function() {\n    self.auth(self.user, self.pass, function() {\n      self.commandQueue.push(cmd);\n      self.nextCmd();\n    });\n  });\n};\n\n/**\n * Parse is called each time that a comand and a request are paired\n * together. That is, each time that there is a round trip of actions\n * between the client and the server.\n *\n * @param {Object} response Response from the server (contains text and code)\n * @param {Array} command Contains the command executed and a callback (if any)\n */\nFtp.prototype.parse = function(response, command) {\n  var err = null;\n  if (response.isError) {\n    err = new Error(response.text || 'Unknown FTP error.');\n    err.code = response.code;\n  }\n\n  command.callback(err, response);\n  this.inProgress = false;\n  this.nextCmd();\n};\n\n/**\n * Returns true if the current server has the requested feature.\n *\n * @param {String} feature Feature to look for\n * @return {Boolean} Whether the current server has the feature\n */\nFtp.prototype.hasFeat = function(feature) {\n  return !!feature && this.features.indexOf(feature.toLowerCase()) > -1;\n};\n\n/**\n * Returns an array of features supported by the current FTP server\n *\n * @param {String} features Server response for the 'FEAT' command\n * @return {String[]} Array of feature names\n */\nFtp.prototype._parseFeats = function(features) {\n  // Split and ignore header and footer\n  var featureLines = features.split(FTP_NEWLINE).slice(1, -1);\n  return featureLines\n    .map(function(feat) {\n      return feat.trim().toLowerCase();\n    })\n    .filter(function(feat) {\n      return !!feat;\n    });\n};\n\n// Below this point all the methods are action helpers for FTP that compose\n// several actions in one command\nFtp.prototype.getFeatures = function(callback) {\n  if (this.features) {\n    return callback(null, this.features);\n  }\n\n  var self = this;\n  this.raw.feat(function(err, response) {\n    self.features = err ? [] : self._parseFeats(response.text);\n    self.raw.syst(function(err, res) {\n      if (!err && res.code === 215) {\n        self.system = res.text.toLowerCase();\n      }\n\n      callback(null, self.features);\n    });\n  });\n};\n\n/**\n * Authenticates the user.\n *\n * @param {String} user Username\n * @param {String} pass Password\n * @param {Function} callback Follow-up function.\n */\nFtp.prototype.auth = function(user, pass, callback) {\n  var self = this;\n\n  if (this.authenticating === true) {\n    return callback(new Error('This client is already authenticating'));\n  }\n\n  if (!user) {\n    user = 'anonymous';\n  }\n  if (!pass) {\n    pass = '@anonymous';\n  }\n\n  this.authenticating = true;\n  self.raw.user(user, function(err, res) {\n    if (err || [230, 331, 332].indexOf(res.code) === -1) {\n      self.authenticating = false;\n      callback(err);\n      return;\n    }\n    self.raw.pass(pass, function(err, res) {\n      self.authenticating = false;\n\n      if (err) {\n        callback(err);\n      } else if ([230, 202].indexOf(res.code) > -1) {\n        self.authenticated = true;\n        self.user = user;\n        self.pass = pass;\n        self.raw.type('I', function() {\n          callback(undefined, res);\n        });\n      } else if (res.code === 332) {\n        self.raw.acct(''); // ACCT not really supported\n      }\n    });\n  });\n};\n\nFtp.prototype.setType = function(type, callback) {\n  type = type.toUpperCase();\n  if (this.type === type) {\n    return callback();\n  }\n\n  var self = this;\n  this.raw.type(type, function(err, data) {\n    if (!err) {\n      self.type = type;\n    }\n\n    callback(err, data);\n  });\n};\n\n/**\n * Lists a folder's contents using a passive connection.\n *\n * @param {String} path Remote path for the file/folder to retrieve\n * @param {Function} callback Function to call with errors or results\n */\nFtp.prototype.list = function(path, callback) {\n  if (arguments.length === 1) {\n    callback = arguments[0];\n    path = '';\n  }\n\n  var self = this;\n  var listing = '';\n  callback = once(callback);\n\n  self.getPasvSocket(function(err, socket) {\n    if (err) {\n      return callback(err);\n    }\n\n    socket.setEncoding('utf8');\n    socket.on('data', function(data) {\n      listing += data;\n    });\n\n    self.pasvTimeout(socket, callback);\n\n    socket.once('close', function(err) {\n      callback(err, listing);\n    });\n    socket.once('error', callback);\n\n    function cmdCallback(err, res) {\n      if (err) {\n        return callback(err);\n      }\n\n      var isExpectedMark = expectedMarks.marks.some(function(mark) {\n        return mark === res.code;\n      });\n\n      if (!isExpectedMark) {\n        callback(new Error(\n          'Expected marks ' + expectedMarks.toString() + ' instead of: ' +\n          res.text));\n      }\n    }\n\n    cmdCallback.expectsMark = expectedMarks;\n\n    self.execute('list ' + (path || ''), cmdCallback);\n  });\n};\n\nFtp.prototype.emitProgress = function(data) {\n  this.emit('progress', {\n    filename: data.filename,\n    action: data.action,\n    total: data.totalSize || 0,\n    transferred: data.socket[data.action === 'get' ? 'bytesRead' : 'bytesWritten']\n  });\n};\n\n/**\n * Depending on the number of parameters, returns the content of the specified\n * file or directly saves a file into the specified destination. In the latter\n * case, an optional callback can be provided, which will receive the error in\n * case the operation was not successful.\n *\n * @param {String} remotePath File to be retrieved from the FTP server\n * @param {Function|String} localPath Local path where we create the new file\n * @param {Function} [callback] Gets called on either success or failure\n */\nFtp.prototype.get = function(remotePath, localPath, callback) {\n  var self = this;\n  var finalCallback;\n\n  if (typeof localPath === 'function') {\n    finalCallback = once(localPath || NOOP);\n  } else {\n    callback = once(callback || NOOP);\n    finalCallback = function(err, socket) {\n      if (err) {\n        return callback(err);\n      }\n\n      var writeStream = fs.createWriteStream(localPath);\n      writeStream.on('error', callback);\n\n      socket.on('readable', function() {\n        self.emitProgress({\n          filename: remotePath,\n          action: 'get',\n          socket: socket\n        });\n      });\n\n      // This ensures that any expected outcome is handled. There is no\n      // danger of the callback being executed several times, because it is\n      // wrapped in `once`.\n      socket.on('error', callback);\n      socket.on('end', callback);\n      socket.on('close', callback);\n\n      socket.pipe(writeStream);\n    };\n  }\n\n  this.getGetSocket(remotePath, finalCallback);\n};\n\n/**\n * Returns a socket for a get (RETR) on a path. The socket is ready to be\n * streamed, but it is returned in a paused state. It is left to the user to\n * resume it.\n *\n * @param {String} path Path to the file to be retrieved\n * @param {Function} callback Function to call when finalized, with the socket\n * as a parameter\n */\nFtp.prototype.getGetSocket = function(path, callback) {\n  var self = this;\n  callback = once(callback);\n  this.getPasvSocket(function(err, socket) {\n    if (err) {\n      return cmdCallback(err);\n    }\n\n    socket.on('error', function(err) {\n      if (err.code === 'ECONNREFUSED') {\n        err.msg = 'Probably trying a PASV operation while one is in progress';\n      }\n      cmdCallback(err);\n    });\n\n    self.pasvTimeout(socket, cmdCallback);\n    socket.pause();\n\n    function cmdCallback(err, res) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (!socket) {\n        return callback(new Error('Error when retrieving PASV socket'));\n      }\n\n      if (res.code === 125 || res.code === 150) {\n        return callback(null, socket);\n      }\n\n      return callback(new Error('Unexpected command ' + res.text));\n    }\n\n    cmdCallback.expectsMark = expectedMarks;\n    self.execute('retr ' + path, cmdCallback);\n  });\n};\n\n/**\n * Uploads contents on a FTP server. The `from` parameter can be a Buffer or the\n * path for a local file to be uploaded.\n *\n * @param {String|Buffer} from Contents to be uploaded.\n * @param {String} to path for the remote destination.\n * @param {Function} callback Function to execute on error or success.\n */\nFtp.prototype.put = function(from, to, callback) {\n  var self = this;\n\n  function putReadable(from, to, totalSize, callback) {\n    from.on('readable', function() {\n      self.emitProgress({\n        filename: to,\n        action: 'put',\n        socket: from,\n        totalSize: totalSize\n      });\n    });\n\n    self.getPutSocket(to, function(err, socket) {\n      if (!err) {\n        from.pipe(socket);\n      }\n    }, callback);\n  }\n\n  if (from instanceof Buffer) {\n    this.getPutSocket(to, function(err, socket) {\n      if (!err) {\n        socket.end(from);\n      }\n    }, callback);\n  } else if (typeof from === 'string') {\n    fs.stat(from, function(err, stats) {\n      if (err && err.code === 'ENOENT') {\n        return callback(new Error(\"Local file doesn't exist.\"));\n      }\n\n      if (stats.isDirectory()) {\n        return callback(new Error('Local path cannot be a directory'));\n      }\n\n      var totalSize = err ? 0 : stats.size;\n      var localFileStream = fs.createReadStream(from, {\n        bufferSize: 4 * 1024\n      });\n      putReadable(localFileStream, to, totalSize, callback);\n    });\n  } else { // `from` is a readable stream\n    putReadable(from, to, from.size, callback);\n  }\n};\n\nFtp.prototype.getPutSocket = function(path, callback, doneCallback) {\n  if (!callback) {\n    throw new Error('A callback argument is required.');\n  }\n\n  doneCallback = once(doneCallback || NOOP);\n  var _callback = once(function(err, _socket) {\n    if (err) {\n      callback(err);\n      return doneCallback(err);\n    }\n    return callback(null, _socket);\n  });\n\n  var self = this;\n  this.getPasvSocket(function(err, socket) {\n    if (err) {\n      return _callback(err);\n    }\n    socket.on('close', doneCallback);\n    socket.on('error', doneCallback);\n\n    var putCallback = once(function putCallback(err, res) {\n      if (err) {\n        return _callback(err);\n      }\n\n      // Mark 150 indicates that the 'STOR' socket is ready to receive data.\n      // Anything else is not relevant.\n      if (res.code === 125 || res.code === 150) {\n        self.pasvTimeout(socket, doneCallback);\n        return _callback(null, socket);\n      }\n\n      return _callback(new Error('Unexpected command ' + res.text));\n    });\n\n    putCallback.expectsMark = expectedMarks;\n\n    self.execute('stor ' + path, putCallback);\n  });\n};\n\nFtp.prototype.pasvTimeout = function(socket, callback) {\n  var self = this;\n  socket.once('timeout', function() {\n    debug('PASV socket timeout');\n    self.emit('timeout');\n    socket.end();\n    callback(new Error('Passive socket timeout'));\n  });\n};\n\nFtp.prototype.getPasvSocket = function(callback) {\n  var self = this;\n  callback = once(callback || NOOP);\n\n  this.execute('pasv', function(err, res) {\n    if (err) {\n      return callback(err);\n    }\n\n    var options = getPasvPort(res.text);\n    if (!options) {\n      return callback(new Error('Bad passive host/port combination'));\n    }\n\n    var socket = self._pasvSocket = Net.createConnection(options);\n    socket.setTimeout(self.timeout || TIMEOUT);\n    socket.once('close', function() {\n      self._pasvSocket = undefined;\n    });\n\n    callback(null, socket);\n  });\n};\n\n/**\n * Provides information about files. It lists a directory contents or\n * a single file and yields an array of file objects. The file objects\n * contain several properties. The main difference between this method and\n * 'list' or 'stat' is that it returns objects with the file properties\n * already parsed.\n *\n * Example of file object:\n *\n *  {\n *      name: 'README.txt',\n *      type: 0,\n *      time: 996052680000,\n *      size: '2582',\n *      owner: 'sergi',\n *      group: 'staff',\n *      userPermissions: { read: true, write: true, exec: false },\n *      groupPermissions: { read: true, write: false, exec: false },\n *      otherPermissions: { read: true, write: false, exec: false }\n *  }\n *\n * The constants used in the object are defined in ftpParser.js\n *\n * @param {String} filePath Path to the file or directory to list\n * @param {Function} callback Function to call with the proper data when\n * the listing is finished.\n */\nFtp.prototype.ls = function(filePath, callback) {\n  function entriesToList(err, entries) {\n    if (err) {\n      return callback(err);\n    }\n\n    ListingParser.parseFtpEntries(entries.text || entries, function(err, files) {\n      if (err) {\n        return callback(err);\n      }\n\n      files.forEach(function(file) {\n        // Normalize UTF8 doing canonical decomposition, followed by\n        // canonical Composition\n        file.name = unorm.nfc(file.name);\n      });\n      callback(null, files);\n    });\n  }\n\n  if (this.useList) {\n    this.list(filePath, entriesToList);\n  } else {\n    var self = this;\n    this.raw.stat(filePath, function(err, data) {\n      // We might be connected to a server that doesn't support the\n      // 'STAT' command, which is set as default. We use 'LIST' instead,\n      // and we set the variable `useList` to true, to avoid extra round\n      // trips to the server to check.\n      var errored = (err && (err.code === 502 || err.code === 500));\n      var isHummingbird = self.system && self.system.indexOf('hummingbird') > -1;\n      if (errored || isHummingbird) {\n        // Not sure if the 'hummingbird' system check ^^^ is still\n        // necessary. If they support any standards, the 500 error\n        // should have us covered. Let's leave it for now.\n        self.useList = true;\n        self.list(filePath, entriesToList);\n      } else {\n        entriesToList(err, data);\n      }\n    });\n  }\n};\n\nFtp.prototype.rename = function(from, to, callback) {\n  var self = this;\n  this.raw.rnfr(from, function(err) {\n    if (err) {\n      return callback(err);\n    }\n    self.raw.rnto(to, callback);\n  });\n};\n\nFtp.prototype.keepAlive = function(wait) {\n  var self = this;\n  if (this._keepAliveInterval) {\n    clearInterval(this._keepAliveInterval);\n  }\n\n  this._keepAliveInterval = setInterval(self.raw.noop, wait || IDLE_TIME);\n};\n\nFtp.prototype.destroy = function() {\n  if (this._keepAliveInterval) {\n    clearInterval(this._keepAliveInterval);\n  }\n\n  if (this.socket && this.socket.writable) {\n    this.socket.end();\n  }\n\n  if (this._pasvSocket && this._pasvSocket.writable) {\n    this._pasvSocket.end();\n  }\n\n  this.resParser.end();\n\n  this.socket = undefined;\n  this._pasvSocket = undefined;\n\n  this.features = null;\n  this.authenticated = false;\n};\n"}